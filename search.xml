<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/04/26/%E8%8E%AB%E9%98%9F/</url>
    <content><![CDATA[<h1 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h1><p>莫队是分块算法的一种重要形式，它是 <strong>对询问进行分块</strong> ，即把询问离线下来，对询问序列进行分块，然后在 $O(n \sqrt n)$ 复杂度内得出所有答案。</p>
<p>// ==TODO== 莫队题单 <a href="https://www.luogu.com.cn/training/2914#problems">https://www.luogu.com.cn/training/2914#problems</a></p>
<p>NOTE 查询类题目，如莫队，在空间不足够的情况下，看看是否能对查询进行分组，如：<a href="https://www.luogu.com.cn/record/78553132">https://www.luogu.com.cn/record/78553132</a></p>
<h2 id="普通莫队"><a href="#普通莫队" class="headerlink" title="普通莫队"></a>普通莫队</h2><p>如果一个询问可以在 $O(1)$ 的时间内将 $[l, r]$ 的询问答案转移到 $[l-1, r], [l+1, r], [l, r-1], [l, r+1]$ ，也就是与 $[l, r]$ 相邻区间的答案， 那么就可以使用莫队算法。</p>
<p>具体来说，我们将询问分块后，对于每一个区间，我们按照暴力解决第一个区间 $[l, r]$ 的询问，然后对于询问 $[l’, r’]$ ，我们<strong>以上一次询问的答案作为基础</strong> ，每次 $O(\sqrt n)$ 地处理上一个区间左端和右端多出或者减少的部分，然后就可以得到这个问题的答案。</p>
<p>为了保证每次将上一个区间 $[l, r]$ 转移到这个区间的复杂度为 $O(\sqrt n)$ ，需要对询问序列进行排序，先整体按照 $l$ 排序，然后对于分块后的序列，每个块内部按照 $r$ 来排序。</p>
<p>下面的模板来自于 oi-wiki 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span> <span class="params">(<span class="type">int</span> pos, <span class="type">int</span> sign)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// update nowAns</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some info</span></span><br><span class="line">    <span class="built_in">sort</span>(querys, querys + m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i =  <span class="number">0</span>; i &lt; m; i ++ ) &#123;</span><br><span class="line">        <span class="type">const</span> query &amp;q = query[i];</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q.l) <span class="built_in">move</span>(--l, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q.r) <span class="built_in">move</span>(r++, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q.l) <span class="built_in">move</span>(l++, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q.r) <span class="built_in">move</span>(--r, <span class="number">-1</span>);</span><br><span class="line">        ans[q.id] = nowAns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂度分析就不写在这了。<del>本蒟蒻根本看不懂</del> </p>
<p>只提一嘴：在 $m$ 和 $n$ 同阶的时候块长可以分为 $\sqrt n$ ，如果不同阶，块长取 $\dfrac n {\sqrt m}$ 是最优解，复杂度达到 $n \sqrt m$ 。</p>
<p>还有个<strong>莫队优化</strong>，使用奇偶化排序，对于奇数块，$r$ 从小到大排序，对于偶数块，$r$ 从大到小排序，这样可以优化 $r$ 指针的移动次数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> len; <span class="comment">// 块长</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, id;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Node &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l / len != rhs.l / len) <span class="keyword">return</span> l &lt; rhs.l; <span class="comment">// 整体排序, 不在同一个块按照l排序</span></span><br><span class="line">        <span class="keyword">if</span> ((l / len) &amp; <span class="number">1</span>) <span class="keyword">return</span> r &lt; rhs.r; <span class="comment">// 奇数块, r从小到大</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> r &gt; rhs.r; <span class="comment">// 偶数块，r从大到小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有个需要注意的点，$l$ 和 $r$ 指针的移动不是任意顺序的，简单点就是只有下面几种情况是正确的：</p>
<p>记忆方法：先把区间扩大，再缩小，到达当前询问的区间。</p>
<p>![[images/moduipoint.png]]</p>
<p><strong>需要注意的是，莫队不仅可以维护 $[l, r]$ 的区间信息，也可以维护 $[1,l], [1,r]$ 或 $[1,l-1], [r+1, n]$ 的信息</strong>，只要初始化区间改一下，然后修改区间的时候注意一下修改的是什么就行。</p>
<p>典中典题目：<a href="https://www.luogu.com.cn/problem/P1494">小Z的袜子</a></p>
<p>题意就是问 $[l, r]$ 中选择任意两个数字，是相同数字的概率为多少。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> n, m, c[N], cnt[N], maxn;</span><br><span class="line">ll ans1[N], ans2[N], sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> query&amp; rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l / maxn != rhs.l / maxn) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="keyword">if</span> (l / maxn &amp; <span class="number">1</span>) <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> r &gt; rhs.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span> <span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    sum += cnt[i];</span><br><span class="line">    ++ cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span> <span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    -- cnt[i];</span><br><span class="line">    sum -= cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    maxn = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r; cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        a[i] = &#123; l, r, i &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].l == a[i].r) &#123;</span><br><span class="line">            ans1[a[i].id] = <span class="number">0</span>, ans2[a[i].id] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l &gt; a[i].l) <span class="built_in">add</span>(c[-- l]);</span><br><span class="line">        <span class="keyword">while</span>(r &lt; a[i].r) <span class="built_in">add</span>(c[++ r]);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; a[i].l) <span class="built_in">del</span>(c[l ++ ]);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; a[i].r) <span class="built_in">del</span>(c[r -- ]);</span><br><span class="line">        ans1[a[i].id] = sum;</span><br><span class="line">        ans2[a[i].id] = (ll)(r - l + <span class="number">1</span>) * (r - l) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans1[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0/1&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll g = __gcd(ans1[i], ans2[i]);</span><br><span class="line">        ans1[i] /= g, ans2[i] /= g;</span><br><span class="line">        cout &lt;&lt; ans1[i] &lt;&lt; <span class="string">&#x27;/&#x27;</span> &lt;&lt; ans2[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板题 <a href="https://www.luogu.com.cn/problem/P2709">https://www.luogu.com.cn/problem/P2709</a></p>
<p>树状数组维护区间 <a href="https://www.luogu.com.cn/problem/P4396">https://www.luogu.com.cn/problem/P4396</a></p>
<p>异或前缀 <a href="https://www.luogu.com.cn/problem/P4462">https://www.luogu.com.cn/problem/P4462</a></p>
<p>bitset + 离散化 对查询分组卡空间<br><a href="https://www.luogu.com.cn/problem/P4688">https://www.luogu.com.cn/problem/P4688</a></p>
<p>正反向bitset <a href="https://www.luogu.com.cn/problem/P3674">https://www.luogu.com.cn/problem/P3674</a></p>
<p>差分 注意维护的区间 <a href="https://www.luogu.com.cn/problem/P5268">https://www.luogu.com.cn/problem/P5268</a></p>
<p>状态压缩 + 转换 <a href="https://www.luogu.com.cn/problem/P3604">https://www.luogu.com.cn/problem/P3604</a></p>
<h2 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h2><p>普通莫队不支持修改，我们可以多加一个时间维度，这样就<strong>把线性分块变成了平面分块</strong>了，我们对询问按照如下规则排序：</p>
<ol>
<li>先按照左端点整体排序分块，这样就变成了线性分块问题了。</li>
<li>与普通莫队分块规则相同，按右端点整体排序分块，在一个块内，按照时间排序。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> maxn; <span class="comment">// 块长</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, i, c; <span class="comment">// i表示操作id, c表示在第几个修改操作的后面</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> query &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l / maxn != rhs.l / maxn) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="comment">// 对r奇偶化排序</span></span><br><span class="line">        <span class="keyword">if</span> (r / maxn != rhs.r / maxn) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l / maxn &amp; <span class="number">1</span>) <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> r &gt; rhs.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对i奇偶化排序</span></span><br><span class="line">        <span class="keyword">if</span> (r / maxn &amp; <span class="number">1</span>) <span class="keyword">return</span> i &lt; rhs.i;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i &gt; rhs.i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注意这样其实就是分块两次，然后按时间排序，因此可以使用两次奇偶化排序。</strong></p>
<p>然后修改的时候其实就是把三个偏移量 $[l, r, time]$ 全部移动到当前的询问状态。我们可以先把 $time$ 移动好，然后移动 $[l, r]$ 就和普通莫队一样了。</p>
<p>带修莫队的时间复杂度为 $n^{\frac 5 3}$ ，块长一般开成 $n^{\frac 2 3}$ 。</p>
<p>虽然时间复杂度看起来比较那个，但是还是能解决 1e5 左右的数据。</p>
<p>典中典题目：[洛谷P1903 [国家集训队] 数颜色 / 维护队列](<a href="https://www.luogu.com.cn/problem/P1903">https://www.luogu.com.cn/problem/P1903</a>) </p>
<p>题意：</p>
<ol>
<li>查询 $[l, r]$ 区间不同的数字的个数。</li>
<li>把第 $x$ 个数字修改为 $y$ 。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">140010</span>, M = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> n, m, c[N], ct[N]; <span class="comment">// ct(i)为c(i)元素修改后的数值</span></span><br><span class="line"><span class="type">int</span> maxn, len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, i, c; <span class="comment">// c表示在第几个修改操作的后面</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> query &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l / maxn != rhs.l / maxn) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="keyword">if</span> (r / maxn != rhs.r / maxn) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l / maxn &amp; <span class="number">1</span>) <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> r &gt; rhs.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r / maxn &amp; <span class="number">1</span>) <span class="keyword">return</span> i &lt; rhs.i;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i &gt; rhs.i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> c1, c2; <span class="comment">// query和change的次数</span></span><br><span class="line"><span class="type">int</span> tot[M], mem[N][<span class="number">3</span>]; <span class="comment">// mem保存change的信息</span></span><br><span class="line"><span class="type">int</span> ans[N], res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span> <span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tot[a]) ++ res;</span><br><span class="line">    ++ tot[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span> <span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    -- tot[a];</span><br><span class="line">    <span class="keyword">if</span> (!tot[a]) -- res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    maxn = (<span class="type">int</span>)<span class="built_in">pow</span>(n*<span class="number">1.0</span>, <span class="number">2.0</span>/<span class="number">3</span>); <span class="comment">// 块长</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c[i]), ct[i] = c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            q[c1].l = a, q[c1].r = b;</span><br><span class="line">            q[c1].i = c1, q[c1].c = c2;</span><br><span class="line">            c1 ++ ;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// mem[][0]为修改的位置, mem[][1]为修改前的颜色，mem[][2]为修改后的颜色</span></span><br><span class="line">            mem[c2][<span class="number">0</span>] = a, mem[c2][<span class="number">1</span>] = ct[a], mem[c2][<span class="number">2</span>] = (ct[a] = b);</span><br><span class="line">            c2 ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q, q + c1);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>, lst = <span class="number">0</span>; <span class="comment">// [l, r]是上次的答案区间，lst是上次修改时间的后一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c1; i ++ ) &#123;</span><br><span class="line">        <span class="comment">// 先修改时间维度</span></span><br><span class="line">        <span class="keyword">for</span> (; lst &lt; q[i].c; lst ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mem[lst][<span class="number">0</span>] &amp;&amp; mem[lst][<span class="number">0</span>] &lt;= r) &#123;</span><br><span class="line">                <span class="built_in">del</span>(mem[lst][<span class="number">1</span>]), <span class="built_in">add</span>(mem[lst][<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 注意修改原数组, 避免后面拓展到这个边界的时间用到了旧的元素</span></span><br><span class="line">            c[mem[lst][<span class="number">0</span>]] = mem[lst][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; lst &gt; q[i].c; lst -- ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &lt;= mem[lst<span class="number">-1</span>][<span class="number">0</span>] &amp;&amp; mem[lst<span class="number">-1</span>][<span class="number">0</span>] &lt;= r) &#123;</span><br><span class="line">                <span class="built_in">del</span>(mem[lst<span class="number">-1</span>][<span class="number">2</span>]), <span class="built_in">add</span>(mem[lst<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            c[mem[lst<span class="number">-1</span>][<span class="number">0</span>]] = mem[lst<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转移区间</span></span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l) <span class="built_in">add</span>(c[-- l]);</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r) <span class="built_in">add</span>(c[++ r]);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l) <span class="built_in">del</span>(c[l ++ ]);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r) <span class="built_in">del</span>(c[r -- ]);</span><br><span class="line">        ans[q[i].i] = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c1; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h2><p>// <a href="https://oi-wiki.org/misc/rollback-mo-algo/">https://oi-wiki.org/misc/rollback-mo-algo/</a></p>
<p>// <a href="https://www.cnblogs.com/Parsnip/p/10969989.html">https://www.cnblogs.com/Parsnip/p/10969989.html</a></p>
<p>回滚莫队适用范围：</p>
<ul>
<li>问题可以莫队(询问可以离线，不带修改)。</li>
<li>区间伸长或者缩短的时候很好维护信息，而另一种操作不好维护信息(比如区间最大值，在缩短的时候怎么找次大值呢？)</li>
</ul>
<p>回滚莫队的复杂度和普通莫队相同，都是 $O(n \sqrt m)$ ，块长开 $n / \sqrt m$ 。</p>
<p>感性理解一下：假如很好维护增加，不好维护减小，我们就不要减小，只增加，通过”更暴力的方法”。</p>
<p>回滚莫队和其他莫队的不同在于它还要对询问范围进行分块，而其他莫队仅需要对询问本身分块。</p>
<p>假设询问上限为 $Q$ ，我们对 $[1, Q]$ 进行分块，那么每个查询都在这些个块中：</p>
<ol>
<li><p>询问的 $l$ 和 $r$ 在同一个块中，<strong>直接暴力查找答案</strong>，复杂度为 $O(\sqrt Q)$ 。</p>
</li>
<li><p>如果不在同一个块中，那就修改初始区间为 $[R+1, R]$ ，其中 $R$ 是 $l$ 所在块的右端点。</p>
<p>然后拓展左右端点， $r$  是单调递增的，直接修改。$l$ 不确定，所以先修改，再撤回操作，这个过程叫做回滚。</p>
</li>
</ol>
<p>// NOTE 莫队本质是通过巧妙转移询问顺序降低复杂度，所以分块后还要对询问排序。</p>
<p><del>虽然但是我也不知道为啥这么暴力还能 $O(n \sqrt m)$ 。</del></p>
<p>// 模板题  历史研究  <a href="https://www.luogu.com.cn/problem/AT1219">https://www.luogu.com.cn/problem/AT1219</a>               (这个更快-&gt;) <a href="https://loj.ac/p/2874">https://loj.ac/p/2874</a></p>
<p>// NOTE 千万注意！！！因为回滚莫队对询问范围和查询序列都做了分块，他们块的求法必须一样，否则会导致错误。<br>![[images/rallBackMo.png]]</p>
<p>// NOTE <strong>回滚莫队由于需要保证在同一个块内，右端点递增，所以不能使用奇偶化排序。</strong></p>
<p>// 模板题  <a href="https://www.luogu.com.cn/problem/P5906">https://www.luogu.com.cn/problem/P5906</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, q, a[N], b[N]; <span class="comment">// b存储离散化后的数组</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> bel[N], L[N], R[N], len, sq;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt[N], __cnt[N]; <span class="comment">// __cnt用来暴力求块内的查询</span></span><br><span class="line">ll ans[N], Ans; <span class="comment">// Ans是当前区间的答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, id;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bel[l] != bel[rhs.l]) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="keyword">return</span> r &lt; rhs.r; <span class="comment">// NOTE 不能使用奇偶化排序！！！</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面这种写法也是可以的，但是既然已经求了bel了那为啥还需要自己算(bushi</span></span><br><span class="line">        <span class="comment">/*int bk1 = (l - 1) / len + 1, bk2 = (rhs.l - 1) / len + 1;</span></span><br><span class="line"><span class="comment">          if (bk1 != bk2) return l &lt; rhs.l;</span></span><br><span class="line"><span class="comment">          return r &lt; rhs.r;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sq = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    len = n / sq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sq; i ++ ) &#123;</span><br><span class="line">        L[i] = (i - <span class="number">1</span>) * len + <span class="number">1</span>;</span><br><span class="line">        R[i] = i * len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (R[sq] &lt; n) &#123;</span><br><span class="line">        sq ++ ;</span><br><span class="line">        L[sq] = R[sq<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        R[sq] = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// init bel</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sq; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = L[i]; j &lt;= R[i]; j ++ )</span><br><span class="line">            bel[j] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    -- cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只增不减的莫队，记得在增加的时候维护当前区间的答案</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span> <span class="params">(<span class="type">int</span> x, ll &amp;nowAns)</span> </span>&#123;</span><br><span class="line">    ++ cnt[x];</span><br><span class="line">    nowAns = <span class="built_in">max</span>(nowAns, <span class="number">1ll</span> * cnt[x] * alls[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        Q[i] = &#123; l, r, i &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        b[i] = <span class="built_in">lower_bound</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>(), a[i]) - alls.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">sort</span>(Q + <span class="number">1</span>, Q + q + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>, last_block = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i ++ ) &#123;</span><br><span class="line">        <span class="comment">// 如果询问的左右端点在一个块内，O(√m)解决</span></span><br><span class="line">        <span class="keyword">if</span> (bel[Q[i].l] == bel[Q[i].r]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = Q[i].l; j &lt;= Q[i].r; j ++ ) ++ __cnt[b[j]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = Q[i].l; j &lt;= Q[i].r; j ++ ) &#123;</span><br><span class="line">                ans[Q[i].id] = <span class="built_in">max</span>(ans[Q[i].id], <span class="number">1ll</span> * __cnt[b[j]] * alls[b[j]]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = Q[i].l; j &lt;= Q[i].r; j ++ ) -- __cnt[b[j]];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果上一个块和左端点的块不同，重新设置l和r</span></span><br><span class="line">        <span class="comment">// l = R + 1, r = R</span></span><br><span class="line">        <span class="comment">// 因为这里需要的是只增不缩的回滚莫队，所以要把l设置为最大值，然后往外拓展</span></span><br><span class="line">        <span class="keyword">if</span> (last_block != bel[Q[i].l]) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; R[bel[Q[i].l]] + <span class="number">1</span>) <span class="built_in">del</span>(b[l ++ ]);</span><br><span class="line">            <span class="keyword">while</span>(r &gt; R[bel[Q[i].l]]) <span class="built_in">del</span>(b[r -- ]);</span><br><span class="line">            r = R[bel[Q[i].l]]; <span class="comment">// 这一句记得加上，因为r可能在R的左边</span></span><br><span class="line">            Ans = <span class="number">0</span>;</span><br><span class="line">            last_block = bel[Q[i].l];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接修改右区间</span></span><br><span class="line">        <span class="keyword">while</span>(r &lt; Q[i].r) <span class="built_in">add</span>(b[++ r], Ans);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意修改作左区间需要回滚，不能真正修改，我们用一个tmp来维护答案</span></span><br><span class="line">        <span class="type">int</span> __l = l;</span><br><span class="line">        ll tmp = Ans;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用临时变量 __l 和 tmp 来更新</span></span><br><span class="line">        <span class="keyword">while</span>(__l &gt; Q[i].l) <span class="built_in">add</span>(b[-- __l], tmp);</span><br><span class="line"></span><br><span class="line">        ans[Q[i].id] = tmp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 __l 和 l 来实现回滚操作</span></span><br><span class="line">        <span class="keyword">while</span>(__l &lt; l) <span class="built_in">del</span>(b[__l ++ ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i ++ ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h2><p>区间上的莫队可以使用如上三种方式，对于树上路径问题，我们也可以把树拆分成序列来做。</p>
<p>树上莫队通常用来处理路径间的信息，因此不能用 DFS 序，因为DFS序中，两个节点的区间没有包含路径上所有点。<br>如下图：<br>![[Pasted image 20220708125825.png]]<br>使用DFS序得到：1236457 在 4-7 区间内只包含 5 节点，而路径上的点应该是 2 和 3.</p>
<p>使用<strong>欧拉序</strong>可以包含路径上所有点。<br>欧拉序中，每个节点都出现两次，分别是开始和回溯的时候。<br>比如上述的欧拉序就是 12366445537721<br>在 4-7 的区间为 45537 <strong>注意LCA是不包含在里面的，因此要特判。</strong></p>
<p>令第一次出现 u 的欧拉序为 st[u]，回溯 u 的欧拉序为 ed[u]<br>对于 u-v 的路径，分两种情况（一下假设 u 比 v 更早出现，即 st[u] &lt; st[v]）：</p>
<ol>
<li>LCA(u, v) = u<br> 那么路径区间为 [st[u], st[v]] 。</li>
<li>LCA(u, v) != u<br> 那么路径区间为 [ed[u], st[v]] 。</li>
</ol>
<p>如上处理后，对于区间中<strong>出现一次的点</strong>，它们在路径上；否则不在路径上，使用莫队维护即可。<br>至于获得欧拉序和LCA，可以使用树链刨分，也可以使用DFS和倍增。</p>
<p>Update: 求子树信息可以使用dfs序，[in[u], out[u]] 即为 $u$ 子树所有节点的信息。<br>树上莫队+树状数组 维护子树 <a href="https://codeforces.com/problemset/problem/375/D">https://codeforces.com/problemset/problem/375/D</a></p>
<p>例题：<a href="https://www.luogu.com.cn/problem/SP10707">https://www.luogu.com.cn/problem/SP10707</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, a[N], maxn;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"><span class="comment">// 树链刨分</span></span><br><span class="line"><span class="type">int</span> dep[N], top[N], son[N], siz[N], fa[N], wt[N], ed[N], st[N], cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span> &#123;</span><br><span class="line">    <span class="type">int</span> id, l, r, lca;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> query &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l / maxn != rhs.l / maxn) <span class="keyword">return</span> l &lt; rhs.l;</span><br><span class="line">        <span class="keyword">if</span> (l / maxn &amp; <span class="number">1</span>) <span class="keyword">return</span> r &lt; rhs.r;</span><br><span class="line">        <span class="keyword">return</span> r &gt; rhs.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs1: 求树的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    dep[u] = dep[p] + <span class="number">1</span>;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    fa[u] = p;</span><br><span class="line">    <span class="type">int</span> maxson = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v: g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == p) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        <span class="keyword">if</span> (maxson &lt; siz[v]) son[u] = v, maxson = siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dfs2: 求链的信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span> <span class="params">(<span class="type">int</span> u, <span class="type">int</span> tp)</span> </span>&#123;</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    st[u] = ++ cnt; wt[cnt] = u;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) <span class="built_in">dfs2</span>(son[u], tp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v: g[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u] || v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">    ed[u] = ++ cnt; wt[cnt] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[x] &lt; dep[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[N]; <span class="comment">// 区间内某个节点被访问多少次</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; all; <span class="comment">// 对颜色离散化</span></span><br><span class="line"><span class="type">int</span> mp[N];</span><br><span class="line"><span class="type">int</span> ans[N], nowAns;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span> <span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    ++ vis[u];</span><br><span class="line">    <span class="keyword">if</span> (vis[u] == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[a[u]] ++ == <span class="number">0</span>) ++ nowAns;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (-- mp[a[u]] == <span class="number">0</span>) -- nowAns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span> <span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    -- vis[u];</span><br><span class="line">    <span class="keyword">if</span> (vis[u] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (-- mp[a[u]] == <span class="number">0</span>) -- nowAns;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[a[u]] ++ == <span class="number">0</span>) ++ nowAns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m); maxn = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), all.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    std::<span class="built_in">sort</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>());</span><br><span class="line">    all.<span class="built_in">erase</span>(<span class="built_in">unique</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>()), all.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) a[i] = <span class="built_in">lower_bound</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>(), a[i]) - all.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, lca=<span class="number">0</span>; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (st[u] &gt; st[v]) <span class="built_in">swap</span>(u, v);</span><br><span class="line">        lca = <span class="built_in">LCA</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span> (lca == u) Q[i] = &#123; i, st[u], st[v], <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">else</span> Q[i] = &#123; i, ed[u], st[v], lca &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(Q + <span class="number">1</span>, Q + m + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">while</span>(l &gt; Q[i].l) <span class="built_in">add</span>(wt[-- l]);</span><br><span class="line">        <span class="keyword">while</span>(r &lt; Q[i].r) <span class="built_in">add</span>(wt[++ r]);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; Q[i].l) <span class="built_in">del</span>(wt[l ++ ]);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; Q[i].r) <span class="built_in">del</span>(wt[r -- ]);</span><br><span class="line">        ans[Q[i].id] = nowAns;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].lca) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mp[a[Q[i].lca]]) ++ ans[Q[i].id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
